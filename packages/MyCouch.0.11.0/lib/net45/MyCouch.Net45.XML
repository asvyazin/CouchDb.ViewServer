<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyCouch.Net45</name>
    </assembly>
    <members>
        <member name="T:MyCouch.IAttachments">
            <summary>
            Used to access and manage attachments to documents.
            </summary>
        </member>
        <member name="M:MyCouch.IAttachments.GetAsync(System.String,System.String)">
            <summary>
            Returns only the requested attachment and not the complete document.
            </summary>
            <param name="docId"></param>
            <param name="attachmentName"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IAttachments.GetAsync(System.String,System.String,System.String)">
            <summary>
            Returns only the requested attachment and not the complete document.
            </summary>
            <param name="docId"></param>
            <param name="docRev"></param>
            <param name="attachmentName"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IAttachments.GetAsync(MyCouch.Commands.GetAttachmentCommand)">
            <summary>
            Returns only the requested attachment and not the complete document.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IAttachments.PutAsync(MyCouch.Commands.PutAttachmentCommand)">
            <summary>
            Used to add an attachment to an existing document.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IAttachments.DeleteAsync(System.String,System.String,System.String)">
            <summary>
            Used to delete an existing attachment.
            </summary>
            <param name="docId"></param>
            <param name="docRev"></param>
            <param name="attachmentName"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IAttachments.DeleteAsync(MyCouch.Commands.DeleteAttachmentCommand)">
            <summary>
            Used to delete an existing attachment.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="P:MyCouch.IClient.Connection">
            <summary>
            The underlying <see cref="T:MyCouch.Net.IConnection"/> used to communicate with CouchDb.
            </summary>
        </member>
        <member name="P:MyCouch.IClient.Serializer">
            <summary>
            The Serializer associated with this client instance. Use this if you want
            to serialize or deserialize using the same behavior that the provider
            has.
            </summary>
            <remarks>If you want a serializer that supports entity conventions, check <see cref="P:MyCouch.IEntities.Serializer"/></remarks>
        </member>
        <member name="P:MyCouch.IClient.Attachments">
            <summary>
            Attachment oriented API operations, for accessing and managing attachments to documents.
            </summary>
        </member>
        <member name="P:MyCouch.IClient.Databases">
            <summary>
            Database oriented API operations.
            </summary>
        </member>
        <member name="P:MyCouch.IClient.Documents">
            <summary>
            Document oriented API operations, for accessing and managing RAW documents.
            </summary>
        </member>
        <member name="P:MyCouch.IClient.Entities">
            <summary>
            Entity oriented API operations, for accessing and managing documents as entities.
            </summary>
        </member>
        <member name="P:MyCouch.IClient.Views">
            <summary>
            View oriented API operations, for accessing and managing views.
            </summary>
        </member>
        <member name="M:MyCouch.Commands.BulkCommand.Include(System.String[])">
            <summary>
            Includes documents for insert, updates or deletes. For deletes
            you can also use <see cref="M:MyCouch.Commands.BulkCommand.Delete(System.String,System.String)"/>.
            </summary>
            <param name="docs"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.Commands.BulkCommand.Delete(System.String,System.String)">
            <summary>
            Includes a document for deletion.
            </summary>
            <param name="id"></param>
            <param name="rev"></param>
            <returns></returns>
        </member>
        <member name="P:MyCouch.Commands.CopyDocumentCommand.SrcId">
            <summary>
            The Id of the document to copy.
            </summary>
        </member>
        <member name="P:MyCouch.Commands.CopyDocumentCommand.SrcRev">
            <summary>
            Optional, the Rev of the document to copy.
            </summary>
        </member>
        <member name="P:MyCouch.Commands.CopyDocumentCommand.NewId">
            <summary>
            The New Id of the new document being created as a copy.
            </summary>
        </member>
        <member name="P:MyCouch.Commands.ReplaceDocumentCommand.SrcId">
            <summary>
            The Id of the document to copy.
            </summary>
        </member>
        <member name="P:MyCouch.Commands.ReplaceDocumentCommand.SrcRev">
            <summary>
            Optional, the Rev of the document to copy.
            </summary>
        </member>
        <member name="P:MyCouch.Commands.ReplaceDocumentCommand.TrgId">
            <summary>
            The Id of the document being replaced.
            </summary>
        </member>
        <member name="P:MyCouch.Commands.ReplaceDocumentCommand.TrgRev">
            <summary>
            The Rev of the document being replaced.
            </summary>
        </member>
        <member name="T:MyCouch.IDatabases">
            <summary>
            Used to manage a database.
            </summary>
        </member>
        <member name="M:MyCouch.IDatabases.PutAsync">
            <summary>
            Creates the database, but only if it does not already exist.
            </summary>
        </member>
        <member name="M:MyCouch.IDatabases.DeleteAsync">
            <summary>
            Deletes the database.
            </summary>
        </member>
        <member name="T:MyCouch.IDocuments">
            <summary>
            Used to access and manage documents. If you want to work with entities, POCOs,
            use <see cref="T:MyCouch.IEntities"/> instead, via <see cref="P:MyCouch.IClient.Entities"/>.
            </summary>
        </member>
        <member name="M:MyCouch.IDocuments.BulkAsync(MyCouch.Commands.BulkCommand)">
            <summary>
            Lets you use the underlying bulk API to insert, update and delete
            documents.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.CopyAsync(System.String,System.String)">
            <summary>
            Copies the document having a document id matching <paramref name="srcId"/> to a new document
            with a new id being <paramref name="newId"/>.
            For more options use <see cref="M:MyCouch.IDocuments.CopyAsync(MyCouch.Commands.CopyDocumentCommand)"/> instead.
            </summary>
            <param name="srcId"></param>
            <param name="newId"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.CopyAsync(System.String,System.String,System.String)">
            <summary>
            Copies the document having a document id matching <paramref name="srcId"/> and rev matching <paramref name="srcRev"/>
            to a new document with a new id being <paramref name="newId"/>.
            For more options use <see cref="M:MyCouch.IDocuments.CopyAsync(MyCouch.Commands.CopyDocumentCommand)"/> instead.
            </summary>
            <param name="srcId"></param>
            <param name="srcRev"></param>
            <param name="newId"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.CopyAsync(MyCouch.Commands.CopyDocumentCommand)">
            <summary>
            Copies the document having a document id matching <paramref name="cmd"/>.SrcId to a new document
            with a new id being <paramref name="cmd"/>.NewId.
            You can also specify a specific revision to copy via <paramref name="cmd"/>.SrcRev.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.ReplaceAsync(System.String,System.String,System.String)">
            <summary>
            Replaces the document having a document id matching <paramref name="trgId"/> and rev <paramref name="trgRev"/>
            with the document having id matching <paramref name="srcId"/>.
            </summary>
            <param name="srcId"></param>
            <param name="trgId"></param>
            <param name="trgRev"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.ReplaceAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Replaces the document having a document id matching <paramref name="trgId"/> and rev <paramref name="trgRev"/>
            with the document having id matching <paramref name="srcId"/> and rev matching <paramref name="srcRev"/>.
            </summary>
            <param name="srcId"></param>
            <param name="srcRev"></param>
            <param name="trgId"></param>
            <param name="trgRev"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.ReplaceAsync(MyCouch.Commands.ReplaceDocumentCommand)">
            <summary>
            Copies the document having a document id matching <paramref name="cmd"/>.SrcId to a new document
            with a new id being <paramref name="cmd"/>.NewId.
            You can also specify a specific revision to copy via <paramref name="cmd"/>.SrcRev.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.ExistsAsync(System.String,System.String)">
            <summary>
            Makes a simple HEAD request which doesn not include the actual JSON document,
            and returns any matched info for the <paramref name="id"/> and the optional
            <paramref name="rev"/>.
            </summary>
            <param name="id"></param>
            <param name="rev">optional</param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.ExistsAsync(MyCouch.Commands.DocumentExistsCommand)">
            <summary>
            Makes a simple HEAD request which doesn not include the actual JSON document,
            and returns any matched info for the <paramref name="cmd"/>.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.GetAsync(System.String,System.String)">
            <summary>
            Gets untyped response with the JSON representation of the document.
            </summary>
            <param name="id">The Id of the document.</param>
            <param name="rev">
            Optional. Lets you specify a specific document revision.
            If not specified, you will get the latest document.
            </param>
            <returns>Untyped response with JSON.</returns>
        </member>
        <member name="M:MyCouch.IDocuments.GetAsync(MyCouch.Commands.GetDocumentCommand)">
            <summary>
            Gets untyped response with the JSON representation of the document.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.PostAsync(System.String)">
            <summary>
            Inserts sent JSON document as it is. No additional metadata like doctype will be added.
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.PostAsync(MyCouch.Commands.PostDocumentCommand)">
            <summary>
            Inserts sent JSON document as it is. No additional metadata like doctype will be added.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.PutAsync(System.String,System.String)">
            <summary>
            Inserts or Updates. The document <paramref name="doc"/> needs to contain the _id and for updates also the _rev field.
            </summary>
            <param name="id"></param>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.PutAsync(System.String,System.String,System.String)">
            <summary>
            Inserts or Updates. The document <paramref name="doc"/> needs to contain the _id but not the _rev, neither for inserts nor for updates.
            </summary>
            <param name="id"></param>
            <param name="rev"></param>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.PutAsync(MyCouch.Commands.PutDocumentCommand)">
            <summary>
            Inserts or Updates. The document in passed <paramref name="cmd"/>.
            The document needs to contain the _id but not the _rev, neither for inserts nor for updates.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.DeleteAsync(System.String,System.String)">
            <summary>
            Deletes the document that matches sent <paramref name="id"/> and <paramref name="rev"/>.
            </summary>
            <param name="id"></param>
            <param name="rev"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IDocuments.DeleteAsync(MyCouch.Commands.DeleteDocumentCommand)">
            <summary>
            Deletes the document that matches sent <paramref name="cmd"/>.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="T:MyCouch.IEntities">
            <summary>
            Used to access and manage documents as entities.
            </summary>
        </member>
        <member name="M:MyCouch.IEntities.GetAsync``1(System.String,System.String)">
            <summary>
            Gets typed entity-response (<see cref="T:MyCouch.EntityResponse`1"/> of <typeparamref name="T"/>)
            representation of the document.
            </summary>
            <typeparam name="T">The type you want the document deserialized as.</typeparam>
            <param name="id">The Id of the document.</param>
            <param name="rev">
            Optional. Lets you specify a specific document revision.
            If not specified, you will get the latest document.
            </param>
            <returns>
            Typed entity-response (<see cref="T:MyCouch.EntityResponse`1"/> of <typeparamref name="T"/>)
            representation of the document
            </returns>
        </member>
        <member name="M:MyCouch.IEntities.GetAsync``1(MyCouch.Commands.GetEntityCommand)">
            <summary>
            Gets typed entity-response (<see cref="T:MyCouch.EntityResponse`1"/> of <typeparamref name="T"/>)
            representation of the document.
            </summary>
            <typeparam name="T">The type you want the document deserialized as.</typeparam>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IEntities.PostAsync``1(``0)">
            <summary>
            Inserts sent entity. The resulting JSON that is inserted will have some additional
            meta-data contained in the JSON, like $doctype.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IEntities.PostAsync``1(MyCouch.Commands.PostEntityCommand{``0})">
            <summary>
            Inserts sent entity. The resulting JSON that is inserted will have some additional
            meta-data contained in the JSON, like $doctype.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IEntities.PutAsync``1(``0)">
            <summary>
            Inserts or Updates sent entity and returns it in the response, and if successful, then with an
            updated _rev value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IEntities.PutAsync``1(MyCouch.Commands.PutEntityCommand{``0})">
            <summary>
            Inserts or Updates sent entity and returns it in the response, and if successful, then with an
            updated _rev value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IEntities.DeleteAsync``1(``0)">
            <summary>
            Deletes the document that matches the values of the document _id and _rev extracted from <paramref name="entity"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:MyCouch.IEntities.Serializer">
            <summary>
            The Serializer associated with this <see cref="T:MyCouch.IEntities"/> instance. Use this if you want
            to serialize or deserialize using entity conventions.
            </summary>
            <remarks>If you want the native, non convention based serializer, check <see cref="P:MyCouch.IClient.Serializer"/></remarks>
        </member>
        <member name="P:MyCouch.IEntities.Reflector">
            <summary>
            Used to get and set specific members of entities when you are using the
            typed API.
            </summary>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.Stale(System.String)">
            <summary>
            Allow the results from a stale view to be used.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.Stale(MyCouch.Querying.Stale)">
            <summary>
            Allow the results from a stale view to be used.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.IncludeDocs(System.Boolean)">
            <summary>
             Include the full content of the documents in the return;
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.Descending(System.Boolean)">
            <summary>
            Return the documents in descending by key order.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.Key(System.String)">
            <summary>
            Return only documents that match the specified key.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.Keys(System.String[])">
            <summary>
            Returns only documents that matches any of the specified keys.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.StartKey(System.String)">
            <summary>
            Return records starting with the specified key.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.StartKeyDocId(System.String)">
            <summary>
            Return records starting with the specified document ID.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.EndKey(System.String)">
            <summary>
            Stop returning records when the specified key is reached.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.EndKeyDocId(System.String)">
            <summary>
            Stop returning records when the specified document ID is reached.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.InclusiveEnd(System.Boolean)">
            <summary>
            Specifies whether the specified end key should be included in the result.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.Skip(System.Int32)">
            <summary>
            Skip this number of records before starting to return the results.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.Limit(System.Int32)">
            <summary>
            Limit the number of the returned documents to the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.Reduce(System.Boolean)">
            <summary>
            Use the reduction function.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.UpdateSeq(System.Boolean)">
            <summary>
            Include the update sequence in the generated results.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.Group(System.Boolean)">
            <summary>
            The group option controls whether the reduce function reduces to a set of distinct keys or to a single result row.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViewQueryConfigurator.GroupLevel(System.Int32)">
            <summary>
            Specify the group level to be used.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.Stale">
            <summary>
            Allow the results from a stale view to be used.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.IncludeDocs">
            <summary>
            Include the full content of the documents in the return.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.Descending">
            <summary>
            Return the documents in descending by key order.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.Key">
            <summary>
            Return only documents that match the specified key.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.Keys">
            <summary>
            Returns only documents that matches any of the specified keys.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.StartKey">
            <summary>
            Return records starting with the specified key.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.StartKeyDocId">
            <summary>
            Return records starting with the specified document ID.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.EndKey">
            <summary>
            Stop returning records when the specified key is reached.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.EndKeyDocId">
            <summary>
            Stop returning records when the specified document ID is reached.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.InclusiveEnd">
            <summary>
            Specifies whether the specified end key should be included in the result.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.Skip">
            <summary>
            Skip this number of records before starting to return the results.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.Limit">
            <summary>
            Limit the number of the returned documents to the specified number.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.Reduce">
            <summary>
            Use the reduction function.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.UpdateSeq">
            <summary>
            Include the update sequence in the generated results.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.Group">
            <summary>
            The group option controls whether the reduce function reduces to a set of distinct keys or to a single result row.
            </summary>
        </member>
        <member name="P:MyCouch.IViewQueryOptions.GroupLevel">
            <summary>
            Specify the group level to be used.
            </summary>
        </member>
        <member name="T:MyCouch.IViews">
            <summary>
            Used to query and manage views.
            </summary>
        </member>
        <member name="M:MyCouch.IViews.RunQueryAsync(MyCouch.IViewQuery)">
            <summary>
            Lets you run an <see cref="T:MyCouch.IViewQuery"/>.
            The resulting <see cref="T:MyCouch.JsonViewQueryResponse"/> will consist of
            Rows being JSON-strings.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViews.RunQueryAsync``1(MyCouch.IViewQuery)">
            <summary>
            Lets you run an <see cref="T:MyCouch.IViewQuery"/>.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViews.QueryAsync(System.String,System.String,System.Action{MyCouch.IViewQueryConfigurator})">
            <summary>
            Creates and executes an <see cref="T:MyCouch.IViewQuery"/> on the fly.
            The resulting <see cref="T:MyCouch.JsonViewQueryResponse"/> will consist of
            Rows being JSON-strings.
            </summary>
            <param name="designDocument"></param>
            <param name="viewname"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:MyCouch.IViews.QueryAsync``1(System.String,System.String,System.Action{MyCouch.IViewQueryConfigurator})">
            <summary>
            Creates and executes an <see cref="T:MyCouch.IViewQuery"/> on the fly.
            </summary>
            <param name="designDocument"></param>
            <param name="viewname"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="T:MyCouch.Serialization.EntityJsonWriter">
            <summary>
            When serializing entities, this writer will use
            conventions found in <see cref="P:MyCouch.Serialization.EntityJsonWriter.Conventions"/>,
            which by default will e.g. inject info about doctype.
            </summary>
        </member>
        <member name="T:MyCouch.Serialization.EntitySerializationContractResolver">
            <summary>
            When deserializing and serializing with this contract resolver,
            Id and Rev members will be mapped according to conventions registrered
            in members of the <see cref="F:MyCouch.Serialization.EntitySerializationContractResolver.EntityReflector"/>.
            </summary>
        </member>
    </members>
</doc>
